scale_x_continuous(limits = c(0, 5)) +
labs(
title = "Prior Predictive Densities",
x = "Odds Ratio",
y = NULL
) +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
library(ggplot2)
library(ggdist)
set.seed(123)
prior_flat <- rnorm(10000, mean = 0, sd = 1)
prior_plausible <- rnorm(10000, mean = 0, sd = 0.3)
prior_skeptical <- rnorm(10000, mean = 0, sd = 0.1)
df <- data.frame(
OR = c(exp(prior_flat), exp(prior_plausible), exp(prior_skeptical)),
Prior = factor(rep(c("Flat (N(0,1))", "Plausible (N(0,0.3))", "Skeptical (N(0,0.1))"), each = 10000),
levels = c("Flat (N(0,1))", "Plausible (N(0,0.3))", "Skeptical (N(0,0.1))"))
)
ggplot(df, aes(x = OR, y = Prior, fill = Prior)) +
stat_halfeye(.width = c(0.5, 0.95), adjust = 2.5, slab_alpha = 0.6) +
geom_vline(xintercept = 1, linetype = "dashed") +
coord_cartesian(xlim = c(0, 5)) +
labs(title = "Prior Predictive Distributions (OR Scale)",
x = "Odds Ratio", y = NULL) +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
library(ggdist)
set.seed(123)
prior_flat <- rnorm(10000, 0, 1)
prior_plausible <- rnorm(10000, 0, 0.3)
prior_skeptical <- rnorm(10000, 0, 0.1)
df_prior <- data.frame(
OR = c(exp(prior_flat), exp(prior_plausible), exp(prior_skeptical)),
Prior = factor(rep(c("Flat (N(0,1))", "Plausible (N(0,0.3))", "Skeptical (N(0,0.1))"), each = 10000),
levels = c("Flat (N(0,1))", "Plausible (N(0,0.3))", "Skeptical (N(0,0.1))"))
)
ggplot(df_prior, aes(x = OR, y = Prior, fill = Prior)) +
stat_halfeye(.width = c(.5, .8, .95), alpha = 0.6) +
geom_vline(xintercept = 1, linetype = "dashed") +
coord_cartesian(xlim = c(0, 5)) +
labs(
title = "Prior Predictive Distributions",
x = "Odds Ratio", y = NULL
) +
theme_minimal()
set.seed(123)
# Simulate from priors on log OR scale
prior_df <- tibble(
logOR = c(rnorm(10000, 0, 1), rnorm(10000, 0, 0.3), rnorm(10000, 0, 0.1)),
Prior = rep(c("Flat (N(0,1))", "Plausible (N(0,0.3))", "Skeptical (N(0,0.1))"), each = 10000)
) %>%
mutate(OR = exp(logOR))
# Plot all priors on shared axes
ggplot(prior_df, aes(x = OR, color = Prior, fill = Prior)) +
stat_halfeye(alpha = 0.5, adjust = 2) +
geom_vline(xintercept = 1, linetype = "dashed") +
coord_cartesian(xlim = c(0, 5)) +
labs(
title = "Prior Predictive Distributions",
x = "Odds Ratio",
y = "Density"
) +
theme_minimal()
# Posterior draws for each prior
posterior_df <- bind_rows(
tibble(
logOR = rnorm(10000, 0, 1), Prior = "Flat (N(0,1))"
),
tibble(
logOR = rnorm(10000, 0, 0.3), Prior = "Plausible (N(0,0.3))"
),
tibble(
logOR = rnorm(10000, 0, 0.1), Prior = "Skeptical (N(0,0.1))"
)
) %>%
mutate(
OR = exp(logOR),
event_rate_new = (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR),
y_new = rbinom(n(), size = n_new, prob = event_rate_new)
)
set.seed(123)
n_standard <- 74
events_standard <- 14
n_new <- 115
posterior_df <- bind_rows(
tibble(
logOR = rnorm(10000, 0, 1), Prior = "Flat (N(0,1))"
),
tibble(
logOR = rnorm(10000, 0, 0.3), Prior = "Plausible (N(0,0.3))"
),
tibble(
logOR = rnorm(10000, 0, 0.1), Prior = "Skeptical (N(0,0.1))"
)
) %>%
mutate(
OR = exp(logOR),
event_rate_std = events_standard / n_standard,
event_rate_new = (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR),
y_new = rbinom(n(), size = n_new, prob = event_rate_new)
)
# Plot posterior predictive distributions
ggplot(posterior_df, aes(x = y_new, fill = Prior, color = Prior)) +
stat_halfeye(alpha = 0.5, adjust = 2) +
geom_vline(xintercept = 4, linetype = "dashed") +
labs(
title = "Posterior Predictive Distribution",
x = "Simulated Number of Events in New Treatment Group (n = 115)",
y = "Density"
) +
theme_minimal()
# Plot posterior predictive distributions
ggplot(posterior_df, aes(x = y_new, fill = Prior, color = Prior)) +
stat_halfeye(alpha = 0.5, adjust = 2) +
geom_vline(xintercept = 4, linetype = "dashed") +
labs(
title = "Posterior Predictive Distribution",
x = "Simulated Number of Events in New Treatment Group (n = 115)",
y = "Density"
) +
theme_minimal()
ggplot(posterior_df, aes(x = y_new, fill = Prior)) +
geom_histogram(alpha = 0.6, bins = 30, position = "identity") +
geom_vline(xintercept = 4, linetype = "dashed", color = "black") +
labs(
title = "Posterior Predictive: Number of Events in Treatment Group",
x = "Simulated Number of Events (out of 115)",
y = "Frequency"
) +
theme_minimal()
set.seed(123)
# Simulate from priors on log OR scale
prior_df <- tibble(
logOR = c(rnorm(10000, 0, 1), rnorm(10000, 0, 0.3), rnorm(10000, 0, 0.1)),
Prior = rep(c("Flat (N(0,1))", "Plausible (N(0,0.3))", "Skeptical (N(0,0.1))"), each = 10000)
) %>%
mutate(OR = exp(logOR))
# Plot all priors on shared axes
ggplot(prior_df, aes(x = OR, color = Prior, fill = Prior)) +
stat_halfeye(alpha = 0.5, adjust = 2) +
geom_vline(xintercept = 1, linetype = "dashed") +
coord_cartesian(xlim = c(0, 5)) +
labs(
title = "Predictive Distributions Based only on the Priors",
x = "Odds Ratio",
y = "Density"
) +
theme_minimal()
library(tidyverse)
library(ggdist)
# Known data
n_std <- 115
y_std <- 4
event_rate_std <- y_std / n_std
n_new <- 74
# Define priors
priors <- tribble(
~Prior,             ~mean, ~sd,
"Flat (N(0,1))",      0,    1,
"Plausible (N(0,0.3))", 0,  0.3,
"Skeptical (N(0,0.1))", 0,  0.1
)
# Posterior predictive draws for 3 priors
posterior_draws <- priors %>%
rowwise() %>%
mutate(draws = list({
logOR <- rnorm(10000, mean, sd)
OR <- exp(logOR)
event_rate_new <- (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR)
tibble(
Prior = Prior,
y_std_pred = rbinom(10000, n_std, event_rate_std),
y_new_pred = rbinom(10000, n_new, event_rate_new),
OR_pred = (y_new_pred / n_new) / (y_std_pred / n_std)
)
})) %>%
pull(draws) %>%
bind_rows()
# Plot 1: Posterior predictive number of events in standard group
ggplot(posterior_draws, aes(x = y_std_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = y_std, linetype = "dashed") +
labs(title = "Posterior Predictive: Events in Standard Group",
x = "Number of Events", y = "Density") +
theme_minimal()
# Plot 2: Posterior predictive number of events in new treatment group
ggplot(posterior_draws, aes(x = y_new_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = y_new, linetype = "dashed") +
labs(title = "Posterior Predictive: Events in New Treatment Group",
x = "Number of Events", y = "Density") +
theme_minimal()
library(tidyverse)
library(ggdist)
# Observed data
n_std <- 115
y_std <- 4
event_rate_std <- y_std / n_std
n_new <- 74
y_new <- 14
# Priors for log(OR)
priors <- tribble(
~Prior, ~mean, ~sd,
"Flat (N(0,1))", 0, 1,
"Plausible (N(0,0.3))", 0, 0.3,
"Skeptical (N(0,0.1))", 0, 0.1
)
# Generate posterior predictive draws
posterior_draws <- priors %>%
rowwise() %>%
mutate(draws = list({
logOR <- rnorm(10000, mean, sd)
OR <- exp(logOR)
event_rate_new <- (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR)
tibble(
Prior = Prior,
y_std_pred = rbinom(10000, n_std, event_rate_std),  # unchanged across priors
y_new_pred = rbinom(10000, n_new, event_rate_new),
OR_pred = (y_new_pred / n_new) / (y_std_pred / n_std)
)
})) %>%
unnest(draws)
# Data from .qmd file
n_std <- 115
y_std <- 4
event_rate_std <- y_std / n_std
n_new <- 74
y_new <- 14
# Priors
priors <- tribble(
~Prior, ~mean, ~sd,
"Flat (N(0,1))", 0, 1,
"Plausible (N(0,0.3))", 0, 0.3,
"Skeptical (N(0,0.1))", 0, 0.1
)
# Posterior predictive draws
posterior_draws <- priors %>%
rowwise() %>%
mutate(draws = list({
logOR <- rnorm(10000, mean, sd)
OR <- exp(logOR)
event_rate_new <- (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR)
tibble(
y_std_pred = rbinom(10000, n_std, event_rate_std),
y_new_pred = rbinom(10000, n_new, event_rate_new),
OR_pred = (y_new_pred / n_new) / (y_std_pred / n_std)
)
})) %>%
unnest(draws)
ggplot(posterior_draws, aes(x = y_std_pred, fill = Prior, color = Prior)) +
geom_density(alpha = 0.4, adjust = 1.5) +
geom_vline(xintercept = y_std, linetype = "dashed") +
labs(title = "Posterior Predictive: Events in Standard Group",
x = "Number of Events", y = "Density") +
theme_minimal()
ggplot(posterior_draws, aes(x = y_new_pred, fill = Prior, color = Prior)) +
geom_density(alpha = 0.4, adjust = 1.5) +
geom_vline(xintercept = y_new, linetype = "dashed") +
labs(title = "Posterior Predictive: Events in New Treatment Group",
x = "Number of Events", y = "Density") +
theme_minimal()
ggplot(posterior_draws, aes(x = OR_pred, fill = Prior, color = Prior)) +
geom_density(alpha = 0.4, adjust = 1.5) +
geom_vline(xintercept = (y_new / n_new) / (y_std / n_std), linetype = "dashed") +
coord_cartesian(xlim = c(0, 3)) +
labs(title = "Posterior Predictive: Odds Ratio",
x = "Predicted OR", y = "Density") +
theme_minimal()
ggplot(posterior_draws, aes(x = OR_pred, fill = Prior, color = Prior)) +
geom_density(alpha = 0.2, adjust = 1.5) +
geom_vline(xintercept = (y_new / n_new) / (y_std / n_std), linetype = "dashed") +
coord_cartesian(xlim = c(0, 3)) +
labs(title = "Posterior Predictive: Odds Ratio",
x = "Predicted OR", y = "Density") +
theme_minimal()
# Corrected: Group A (Standard) is reference group
n_A <- 74
y_A <- 14
event_rate_A <- y_A / n_A
n_B <- 115
y_B <- 4
# Priors for logOR of B vs A
priors <- tribble(
~Prior, ~mean, ~sd,
"Flat (N(0,1))", 0, 1,
"Plausible (N(0,0.3))", 0, 0.3,
"Skeptical (N(0,0.1))", 0, 0.1
)
# Posterior predictive draws
posterior_draws <- priors %>%
rowwise() %>%
mutate(draws = list({
logOR <- rnorm(10000, mean, sd)
OR <- exp(logOR)
event_rate_B <- (event_rate_A * OR) / (1 - event_rate_A + event_rate_A * OR)
tibble(
y_A_pred = rbinom(10000, n_A, event_rate_A),
y_B_pred = rbinom(10000, n_B, event_rate_B),
OR_pred = (y_B_pred / n_B) / (y_A_pred / n_A)
)
})) %>%
unnest(draws)
ggplot(posterior_draws, aes(x = y_std_pred, fill = Prior, color = Prior)) +
geom_density(alpha = 0.4, adjust = 1.5) +
geom_vline(xintercept = y_std, linetype = "dashed") +
labs(title = "Posterior Predictive: Events in New Treatment  Group",
x = "Number of Events", y = "Density") +
theme_minimal()
library(ggplot2)
library(ggdist)
library(dplyr)
library(tibble)
set.seed(123)
# Define priors
priors <- tribble(
~Prior, ~mean, ~sd,
"Flat (N(0,1))", 0, 1,
"Plausible (N(0,0.3))", 0, 0.3,
"Skeptical (N(0,0.1))", 0, 0.1
)
# Generate prior draws on OR scale
prior_draws <- priors %>%
rowwise() %>%
mutate(draws = list(tibble(
OR = exp(rnorm(10000, mean, sd)),
Prior = Prior
))) %>%
unnest(draws)
# Observed data
y_std <- 14
n_std <- 74
y_new <- 4
n_new <- 115
event_rate_std <- y_std / n_std
posterior_draws <- priors %>%
rowwise() %>%
mutate(draws = list({
logOR <- rnorm(10000, mean, sd)
OR <- exp(logOR)
event_rate_new <- (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR)
tibble(
Prior = Prior,
y_std_pred = rbinom(10000, n_std, event_rate_std),
y_new_pred = rbinom(10000, n_new, event_rate_new),
OR_pred = (y_new_pred / n_new) / (y_std_pred / n_std)
)
})) %>%
unnest(draws)
library(ggplot2)
library(ggdist)
library(dplyr)
library(tibble)
library(tidyr)  # for unnest()
set.seed(123)
priors <- tribble(
~Prior, ~mean, ~sd,
"Flat (N(0,1))", 0, 1,
"Plausible (N(0,0.3))", 0, 0.3,
"Skeptical (N(0,0.1))", 0, 0.1
)
# Generate prior draws
prior_draws <- priors %>%
rowwise() %>%
mutate(draws = list(tibble(
OR = exp(rnorm(10000, mean, sd))
))) %>%
unnest(draws)
# Plot on shared axis
ggplot(prior_draws, aes(x = OR, fill = Prior, color = Prior)) +
stat_halfeye(alpha = 0.6, slab_color = NA) +
coord_cartesian(xlim = c(0, 5)) +
geom_vline(xintercept = 1, linetype = "dashed") +
labs(
title = "Prior Predictive: Odds Ratio",
x = "Odds Ratio",
y = "Density"
) +
theme_minimal()
# Observed data
y_std <- 14
n_std <- 74
y_new <- 4
n_new <- 115
event_rate_std <- y_std / n_std
# Posterior draws
posterior_draws <- priors %>%
rowwise() %>%
mutate(draws = list({
logOR <- rnorm(10000, mean, sd)
OR <- exp(logOR)
event_rate_new <- (event_rate_std * OR) / (1 - event_rate_std + event_rate_std * OR)
tibble(
y_std_pred = rbinom(10000, n_std, event_rate_std),
y_new_pred = rbinom(10000, n_new, event_rate_new),
OR_pred = (y_new_pred / n_new) / (y_std_pred / n_std)
)
})) %>%
unnest(draws)
ggplot(posterior_draws, aes(x = y_std_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = y_std, linetype = "dashed") +
labs(
title = "Posterior Predictive: Events in Standard Group",
x = "Number of Events", y = "Density"
) +
theme_minimal()
ggplot(posterior_draws, aes(x = y_new_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = y_new, linetype = "dashed") +
labs(
title = "Posterior Predictive: Events in New Treatment Group",
x = "Number of Events", y = "Density"
) +
theme_minimal()
ggplot(posterior_draws, aes(x = OR_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = (y_new / n_new) / (y_std / n_std), linetype = "dashed") +
labs(
title = "Posterior Predictive: Odds Ratio",
x = "Odds Ratio", y = "Density"
) +
coord_cartesian(xlim = c(0, 3)) +
theme_minimal()
ggplot(posterior_draws, aes(x = OR_pred, fill = Prior)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = (y_new / n_new) / (y_std / n_std), linetype = "dashed") +
labs(
title = "Posterior Predictive: Odds Ratio",
x = "Odds Ratio", y = "Density"
) +
coord_cartesian(xlim = c(0, 3)) +
theme_minimal()
ggplot(posterior_draws, aes(x = OR_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = (y_new / n_new) / (y_std / n_std), linetype = "dashed") +
labs(
title = "Posterior Predictive: Odds Ratio",
x = "Odds Ratio", y = "Density"
) +
coord_cartesian(xlim = c(0, 3)) +
theme_minimal()
ggplot(posterior_draws, aes(x = OR_pred, fill = Prior)) +
geom_density(alpha = 0.6) +
geom_vline(xintercept = (y_new / n_new) / (y_std / n_std), linetype = "dashed") +
labs(
title = "Posterior Predictive: Odds Ratio",
x = "Odds Ratio", y = "Density"
) +
coord_cartesian(xlim = c(0, 3)) +
theme_minimal()
# Simulate sparse data with no true effect: P(A) = P(B) = 0.16
set.seed(123)
n_A <- 50
n_B <- 50
p_event <- 0.16
df <- tibble(
group = rep(c("A", "B"), each = 50),
y = c(rbinom(n_A, 1, p_event), rbinom(n_B, 1, p_event))
)
# Fit Bayesian logistic regression
model <- brm(
formula = y ~ group,
data = df,
family = bernoulli(),
prior = c(
prior(normal(0, 1), class = "Intercept"),
prior(normal(0, 1), class = "b")
),
iter = 4000, warmup = 1000, chains = 4, cores = 4, refresh = 0
)
# Posterior probability that B > A
posterior <- posterior_samples(model)
prob_B_gt_A <- mean(posterior$b_groupB > 0)
round(prob_B_gt_A, 3)
exp(0)
exp(0.3)
exp(0.1)
exp(0+c(-1,1)*0.3*3.92)
exp(0+c(-1,1)*0.1*3.92)
log(.18)
.18/(.48/3.92)
.48/3.92
.18+2*.122
log(.18)
log(.54)
log(.06)
abs(-2.813 -.4)
abs(log(.06) - log(.54))
abs(log(.06) - log(.54))/3.92
log(.18)/abs(log(.06) - log(.54))/3.92
log(.18)/(abs(log(.06) - log(.54))/3.92)
library(devtools)
has_devel()
packageVersion("usethis")
usethis::git_sitrep()
# Set global Git name and email (only do this once)
usethis::use_git_config(
user.name = "Jay Brophy",
user.email = "james.brophy@mcgill.ca"
)
usethis::edit_git_config(scope = "global")
usethis::edit_git_config(scope = "user")
usethis::git_sitrep()
usethis::git_vaccinate()
usethis::git_default_branch_rediscover()
usethis::git_sitrep()
usethis::create_github_token()
usethis::edit_r_environ()
usethis::git_sitrep()
usethis::edit_r_environ()
